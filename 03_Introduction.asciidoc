[introduction]
== Introduction

The computational power of today's microprocessors is far superior to that of their early predecessors, both in speed and complexity. This also impacts the way these systems are studied and used. One way to estimate the complexity of microprocessing systems can be made by comparing the number of pages of their respective manuals. The first microprocessors, which appeared in the 1970s, had manuals consisting of tens of pages. Modern microprocessors integrate so many peripherals, functional blocks and sophisticated interconnection buses that the set of associated manuals easily exceeds thousands of pages.  

Technological progress is rapid and cannot be postponed, while the duration of engineering courses, where theoretical and practical principles are taught, is more or less constant. This situation implies a difficult decision: In order to keep the contents of the study programs updated, what should remain in the curricular content and what should come out?  For example, not presenting students with the latest advances and technological trends can result in practical obsolescence, even before they graduate. On the other hand, basic concepts cannot be left out, since without them it is impossible to deepen knowledge. If, due to time constraints, universities choose to concentrate on the use and application of the latest technological advances, sacrificing the study of basic theoretical concepts, there is a risk of training engineers who do not go beyond being just qualified users of technologies, without understanding the principles that govern their internal functioning. On the other hand, if the university focuses only on theoretical concepts and on carrying out practices with very backward technology, engineers are graduated at a disadvantage with respect to the use of the latest technological advances. These situations are particularly noticeable in the case of the teaching of advanced logical design and micro-processing system courses, where the mastery of basic concepts is fundamental for the design of original and functional solutions, but where the technological advance is also overwhelming. 

This work presents the development of the design of a small electronic microprocessor device, based on the basic concepts of a classic central processing unit (CPU), as well as its implementation and programming by taking advantage of the latest programmable logic design technology. The presented content allows the theoretical foundations to be reconciled naturally with the latest technology. The aim is to ensure an effective appropriation of knowledge, with mastery of theory and its corresponding practical application, through the step-by-step design of a basic CPU and its implementation through the resources of a low-cost FPGA development card.

The architecture of the proposed CPU has as its starting point the work of Emil L. Post, an American mathematician, who in the 1930s developed, simultaneously but independently, a work similar to that of the famous English mathematician Alan Turing, with regard to the conceptualization of a computer "machine". Post's "machine" has been chosen instead of Turing's "machine", due to the lesser complexity of the former with respect to the latter. Specifically, the instruction set of Post's Machine is smaller than that of Turing's Machine, and yet both can be considered general-purpose computers, meaning that both can be used to solve computable problems.  

In this work, the system design uses the register transfer level (RTL) approach; the operation of the proposed CPU is specified, at the micro-code level, by algorithmic state machine charts with data path (ASMD) and the hardware is coded using VHDL language.

Thus, as for the practical implementation, an inexpensive development board, with a Xilinx FPGA, and the Vivado development environment will be used. 

The work consists of the following chapters: In Chapter 1, the theoretical and conceptual framework concerning the Post’s Machine is given, as well as the upgrades and improvements proposed in this work. In Chapter 2, the codification of instructions and programs for the upgraded and improved Post’s Machine is presented. In Chapter 3, the logical design of the proposed architecture and its specification by means of ASDM charts is shown. In Chapter 4, the specification of the input/output interface for the practical realization of a prototype for the Enhanced Post’s Machine (EPM) is considered. Finally, the conclusions of the author are drawn. The Appendix presents the particular instructions for the synthesis of the hardware and the corresponding mounting on the FPGA of a low-cost experimental board.
